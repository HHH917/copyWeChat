<template>
	<div>
		<!-- 导航栏 -->
		<free-nav-bar title="HHH博客" :noreadnum="1" :fixed="true" showBack>
			<free-icon-button slot="right" :icon="'\ue6fd'" @click="openChatSet"></free-icon-button>
		</free-nav-bar>
		<!-- 聊天内容区域 -->
		<scroll-view
			scroll-y="true"
			class=" hide-scrollbar bg-light position-fixed left-0 right-0 px-3"
			style="bottom: 105rpx;"
			:style="chatBodyBottom"
			:show-scrollbar="false"
			:scroll-into-view="scrollIntoView"
			:scroll-with-animation="true"
			@click="clickPage"
		>
			<!-- 聊天信息列表组件 -->
			<view
				v-for="(item, index) in list"
				:key="index"
				:id="'chatItem_' + index"
			>
				<free-chat-item
					:item="item"
					:index="index"
					ref="chatItem"
					@long="long"
					@preview="previewImages"
					:pretime="index > 0 ? list[index - 1].create_time : 0"
				></free-chat-item>
			</view>
		</scroll-view>
		<!-- #ifdef APP-NVUE -->
		<div
			v-if="mode === 'action' || mode === 'emoticon'"
			class="position-fixed top-0 right-0 left-0 bottom-0"
			:style="'bottom:' + maskBottom + 'px'"
			@click="clickPage"
		></div>
		<!-- #endif -->

		<!-- 底部输入框 -->
		<view
			class="position-fixed left-0 right-0  border-top flex align-center "
			style="background-color: #f7f7f6;height: 105rpx;"
			:style="'bottom:' + KeyboardHeight + 'px'"
		>
			<free-icon-button
				v-if="mode === 'audio'"
				:icon="'\ue607'"
				@click="changeVoiceOrText"
			></free-icon-button>
			<free-icon-button
				v-else
				:icon="'\ue606'"
				@click="changeVoiceOrText"
			></free-icon-button>
			<view class="flex-1">
				<view
					v-if="mode === 'audio'"
					class=" rounded flex align-center justify-center"
					style="height: 80rpx;"
					:class="isRecording ? 'bg-hover-light' : 'bg-white'"
					@touchstart="voiceTouchStart"
					@touchend="voiceTouchEnd"
					@touchcancel="voiceTouchCancel"
					@touchmove="voiceTouchMove"
				>
					<text class="font">
						{{ isRecording ? '松开 结束' : '按住 说话' }}
					</text>
				</view>
				<textarea
					v-else
					fixed
					class=" bg-white rounded p-2"
					style="height: 80rpx; width: auto;"
					:adjust-position="false"
					v-model="text"
					@focus="mode = 'text'"
				/>
			</view>
			<!-- 表情 -->
			<free-icon-button
				:icon="'\ue605'"
				@click="openActionOrEmoticon('emoticon')"
			></free-icon-button>

			<template v-if="text.length === 0">
				<!-- 扩展菜单 -->
				<free-icon-button
					:icon="'\ue603'"
					@click="openActionOrEmoticon('action')"
				></free-icon-button>
			</template>
			<template v-else>
				<!-- 发送按钮 -->
				<free-main-button name="发送" @click="send('text')"></free-main-button>
			</template>
		</view>
		<!-- 扩展菜单弹出层 -->
		<free-popup
			ref="action"
			bottom
			transformOrigin="center bottom"
			@hide="KeyboardHeight = 0"
			:mask="false"
		>
			<view
				style="height: 580rpx;"
				class="border-top border-light-secondary bg-light"
			>
				<swiper :indicator-dots="indicatorDots" style="height: 510rpx;">
					<swiper-item
						class="row"
						v-for="(item, index) in emoticonOrAcitonList"
						:key="index"
					>
						<view
							class="col-3 flex flex-column align-center justify-center"
							style="height:255rpx;"
							v-for="(item2, index2) in item"
							:key="index2"
							@click="actionEvent(item2)"
						>
							<image
								:src="item2.icon"
								mode="widthFix"
								style="width:100rpx;height: 100rpx;"
							></image>
							<text class="font-sm text-muted mt-2">
								{{ item2.name }}
							</text>
						</view>
					</swiper-item>
				</swiper>
			</view>
		</free-popup>

		<!-- 弹出层 -->
		<free-popup
			ref="extend"
			:bodyWidth="300"
			:bodyHeight="getMenusHeight"
			:tabbarHeight="105"
		>
			<view
				class="flex flex-column"
				style="width: 240rpx;"
				:style="getMenusStyle"
			>
				<view
					class="flex-1 flex align-center"
					hover-class="bg-light"
					v-for="(item, index) in menusList"
					:key="index"
					@click="clickEvent(item.event)"
				>
					<text class="font-md pl-3">{{ item.name }}</text>
				</view>
			</view>
		</free-popup>

		<!-- 录音提示 -->
		<view
			v-if="isRecording"
			class="position-fixed top-0 left-0 right-0 flex align-center justify-center"
			style="bottom:105rpx;"
		>
			<view
				class="rounded flex flex-column align-center justify-center"
				style="background-color: rgba(0,0,0,0.5); width: 360rpx;height: 360rpx;"
			>
				<image
					src="/static/audio/recording.gif"
					style="width: 150rpx; height: 150rpx;"
				></image>
				<text class="font text-white mt-3">
					{{ unRecord ? '松开手指,取消发送' : '手指上滑,取消发送' }}
				</text>
			</view>
		</view>
	</div>
</template>

<script>
// #ifdef APP-NVUE
const dom = weex.requireModule('dom');
// #endif

import freeNavBar from '@/components/free-ui/free-nav-bar.vue';
import freeIconButton from '@/components/free-ui/free-icon-button.vue';
import freeChatItem from '@/components/free-ui/free-chat-item.vue';
import freePopup from '@/components/free-ui/free-popup.vue';
import freeMainButton from '@/components/free-ui/free-main-button.vue';
import { mapState, mapMutations } from 'vuex';
export default {
	components: {
		freeNavBar,
		freeIconButton,
		freeChatItem,
		freePopup,
		freeMainButton
	},
	data() {
		return {
			//模式 text 输入文字 emoitcon表情 action 操作 audio音频
			mode: 'audio',
			// 扩展菜单列表
			actionList: [
				[
					{
						name: '相册',
						icon: '/static/images/extends/pic.png',
						event: 'uploadImage'
					},
					{
						name: '拍摄',
						icon: '/static/images/extends/video.png',
						event: 'uploadVideo'
					},
					{
						name: '收藏',
						icon: '/static/images/extends/shoucan.png',
						event: ''
					},
					{
						name: '名片',
						icon: '/static/images/extends/man.png',
						event: ''
					},
					{
						name: '语音通话',
						icon: '/static/images/extends/phone.png',
						event: ''
					},
					{
						name: '位置',
						icon: '/static/images/extends/path.png',
						event: ''
					}
				]
			],
			emoticonList: [
				// [
				// 	{
				// 		name: '沮丧',
				// 		icon: '/static/images/emoticon/5497/0.gif',
				// 		event: ''
				// 	}
				// ]
			],
			//键盘高度
			KeyboardHeight: 0,
			menus: [
				{
					name: '复制',
					event: ''
				},
				{
					name: '发送给朋友',
					event: ''
				},
				{
					name: '收藏',
					event: ''
				},
				{
					name: '删除',
					event: ''
				},
				{
					name: '多选',
					event: ''
				},
				{
					name: '撤回',
					event: 'removeChatItem'
				}
			],

			scrollIntoView: '',
			// 是否显示指示灯
			indicatorDots: true,
			// 当前操作的气泡索引
			propIndex: -1,
			// 音频录制状态
			isRecording: false,
			RecordingStartY: 0,
			// 取消录音
			unRecord: false,

			navBarHeight: 0,
			statusBarHeight: 0,

			list: [
				{
					avatar: '/static/images/mail/friend.png',
					user_id: 1,
					nickname: '昵称',
					type: 'text', //image,audio,video,file,share
					data:
						'你好,ヽ(*^ｰ^)人(^ｰ^*)ノ你好,ヽ(*^ｰ^)人(^ｰ^*)ノ你好,ヽ(*^ｰ^)人(^ｰ^*)ノ你好,ヽ(*^ｰ^)人(^ｰ^*)ノ',
					create_time: 1616741674,
					isremove: true
				},
				{
					avatar: '/static/images/mail/friend.png',
					user_id: 2,
					nickname: '昵称',
					type: 'text', //image,audio,video,file,share
					data:
						'你好,ヽ(*^ｰ^)人(^ｰ^*)ノ你好,ヽ(*^ｰ^)人(^ｰ^*)ノ你好,ヽ(*^ｰ^)人(^ｰ^*)ノ你好,ヽ(*^ｰ^)人(^ｰ^*)ノ',
					create_time: 1616742034,
					isremove: false
				},

				{
					avatar: '/static/images/mail/friend.png',
					user_id: 1,
					nickname: '昵称',
					type: 'text', //image,audio,video,file,share
					data:
						'你好,ヽ(*^ｰ^)人(^ｰ^*)ノ你好,ヽ(*^ｰ^)人(^ｰ^*)ノ你好,ヽ(*^ｰ^)人(^ｰ^*)ノ你好,ヽ(*^ｰ^)人(^ｰ^*)ノ',
					create_time: 1616742034,
					isremove: false
				},

				{
					avatar: '/static/images/mail/friend.png',
					user_id: 2,
					nickname: '昵称',
					type: 'text', //image,audio,video,file,share
					data:
						'你好,ヽ(*^ｰ^)人(^ｰ^*)ノ你好,ヽ(*^ｰ^)人(^ｰ^*)ノ你好,ヽ(*^ｰ^)人(^ｰ^*)ノ你好,ヽ(*^ｰ^)人(^ｰ^*)ノ',
					create_time: 1616742034,
					isremove: false
				},
				{
					avatar: '/static/images/mail/friend.png',
					user_id: 2,
					nickname: '昵称',
					type: 'audio', //image,audio,video,file,share
					data: '/static/audio/1.mp3',
					options: {
						time: 10
					},
					create_time: 1616742034,
					isremove: false
				},
				{
					avatar: '/static/images/mail/friend.png',
					user_id: 2,
					nickname: '昵称',
					type: 'video', //image,audio,video,file,share
					data: '/static/video/demo.mp4',
					options: {
						poster: '/static/video/demo.jpg'
					},
					create_time: 1616742034,
					isremove: false
				},
				{
					avatar: '/static/images/mail/friend.png',
					user_id: 1,
					nickname: '昵称',
					type: 'video', //image,audio,video,file,share
					data: '/static/video/demo.mp4',
					options: {
						poster: '/static/video/demo.jpg'
					},
					create_time: 1616742034,
					isremove: false
				}
			],

			text: '' //输入文字
		};
	},
	mounted() {
		// #ifdef APP-PLUS-NVUE
		this.statusBarHeight = plus.navigator.getStatusbarHeight();
		// #endif
		this.navBarHeight = this.statusBarHeight + uni.upx2px(90);

		// 监听键盘高度变化
		uni.onKeyboardHeightChange(res => {
			// 修复@foucus 事件触发比 onKeyboardHeightChange键盘高度变化监听慢的bug;
			if (res.height > 0) {
				this.mode = 'text';
			}
			if (this.mode !== 'action' && this.mode !== 'emoticon') {
				this.KeyboardHeight = res.height;
			}

			if (this.KeyboardHeight > 0) {
				this.pageToBottom();
			}
		});
		this.pageToBottom();

		// 注册发送音频事件
		this.regSendVoiceEvent(url => {
			if (!this.unRecord) {
				//发送
				this.send('audio', url, {
					time: this.RecordTime
				});
			}
		});
	},
	computed: {
		...mapState({
			RECORD: state => state.audio.RECORD,
			RecordTime: state => state.audio.RecordTime
		}),
		// 动态获取蒙版的位置
		maskBottom() {
			return this.KeyboardHeight + uni.upx2px(105);
		},

		// 动态获取菜单高度
		getMenusHeight() {
			let H = 100;
			return this.menus.length * H;
		},
		// 获取菜单的样式
		getMenusStyle() {
			return ` height:${this.getMenusHeight}rpx;`;
		},
		//判断是否操作本人信息
		isdoSelf() {
			// 获取本人id (假设拿到了)
			let id = 1;
			let user_id =
				this.propIndex > -1 ? this.list[this.propIndex].user_id : 0;
			return user_id === id;
		},
		// 获取操作菜单
		menusList() {
			return this.menus.filter(v => {
				if (v.name === '撤回' && !this.isdoSelf) {
					return false;
				} else {
					return true;
				}
			});
		},
		// 聊天区域bottom
		chatBodyBottom() {
			return `bottom:${uni.upx2px(105) + this.KeyboardHeight}px;top:${
				this.navBarHeight
			}px;`;
		},
		// 获取操作或者表情列表
		emoticonOrAcitonList() {
			let list =
				this.mode === 'emoticon' || this.mode === 'action'
					? this[this.mode + 'List']
					: [];
			this.indicatorDots = list.length > 1;
			return list;
		},
		// 所以信息的图片地址
		imageList() {
			let arr = [];
			this.list.forEach(item => {
				if (item.type === 'emoticon' || item.type === 'image') {
					arr.push(item.data);
				}
			});
			return arr;
		}
	},
	watch: {
		mode(newValue, oldValue) {
			if (newValue !== 'action' && newValue !== 'emoticon') {
				this.$refs.action.hide();
			}
			if (newValue !== 'text') {
				uni.hideKeyboard();
			}
		}
	},
	created() {
		// 初始化
		this.__init();
	},
	methods: {
		...mapMutations(['regSendVoiceEvent']),
		__init() {
			let total = 20;
			let page = Math.ceil(total / 8);
			var arr = [];
			for (let i = 0; i < page; i++) {
				let start = i * 8;
				arr[i] = [];
				for (let j = 0; j < 8; j++) {
					let no = start + j;
					if (no + 1 > total) {
						break;
					}
					arr[i].push({
						name: '表情' + (start + j),
						icon:
							'/static/images/emoticon/5497/' +
							(start + j) +
							'.gif',
						event: 'sendEmoticon'
					});
				}
			}
			this.emoticonList = arr;
		},
		// 打开扩展菜单或者表情包
		openActionOrEmoticon(mode = 'action') {
			this.mode = mode;
			this.$refs.action.show();
			// 收起键盘
			uni.hideKeyboard();
			this.KeyboardHeight = uni.upx2px(580);
		},
		// 点击页面区域
		clickPage() {
			this.mode = '';
			// this.$refs.action.hide();
		},
		// 输入框聚焦
		onInputFocus() {
			this.mode = 'text';
		},
		// 发送
		send(type, data = '', options = {}) {
			var obj = {
				avatar: '/static/images/mail/friend.png',
				user_id: 1,
				nickname: '昵称',
				type: type, //image,audio,video,file,share,emoticon
				data: data,
				options: options,
				create_time: new Date().getTime(),
				isremove: false
			};
			switch (type) {
				case 'text':
					obj.data = this.text;
					break;
			}
			this.list.push(obj);
			// 发送文字成功,清空输入框
			if (type === 'text') {
				this.text = '';
			}
			// 置于底部
			this.pageToBottom();
		},
		// 回到底部

		pageToBottom() {
			let timer = setTimeout(() => {
				// #ifdef APP-NVUE
				let chatItem = this.$refs.chatItem;
				let lastIndex = chatItem.length > 0 ? chatItem.length - 1 : 0;
				let last = chatItem[lastIndex];
				if (last) {
					dom.scrollElement(last, {});
				}
				// #endif

				// #ifndef APP-NVUE
				console.log('进入了');
				let lastIndex = this.list.length - 1;
				this.scrollIntoView = 'chatItem_' + lastIndex;
				// #endif
				clearTimeout(timer);
			}, 200);
		},
		// 长按气泡消息
		long({ x, y, index }) {
			// 初始化 索引
			this.propIndex = index;
			// 判断之前是否处于置顶状态
			let item = this.list[index];
			this.menus[0].name = item.istop ? '取消置顶' : '设为置顶';

			this.$refs.extend.show(x, y);
		},
		// 操作菜单方法分发
		clickEvent(event) {
			switch (event) {
				case 'removeChatItem':
					if (this.propIndex > -1) {
						this.list[this.propIndex].isremove = true;
					}

					break;
				default:
					break;
			}
			//关闭菜单
			this.$refs.extend.hide();
		},
		//扩展菜单
		actionEvent(e) {
			switch (e.event) {
				case 'uploadImage': // 选择相册
					uni.chooseImage({
						count: 9,
						success: res => {
							console.log(res.tempFilePaths);
							// 发送到服务器

							// 渲染到页面
							res.tempFilePaths.forEach(item => {
								this.send('image', item);
							});
						}
					});
					break;
				case 'uploadVideo': //发送视频
					uni.chooseVideo({
						maxDuration:60,
						success: (res)=> {
							// self.src = res.tempFilePath;
							// 渲染页面
							this.send('video', res.tempFilePath);
							// 发送到服务端（获取视频封面，返回url）
							// 修改本地的发送状态
							
						}
					});
					// this.send('emoticon', e.icon);
					break;
				case 'sendEmoticon': //发送表情包
					this.send('emoticon', e.icon);
					break;
			}
		},
		// 预览图片
		previewImages(url) {
			uni.previewImage({
				current: url,
				urls: this.imageList,
				indicator: 'default'
			});
		},
		// 切换音频录制和文本输入
		changeVoiceOrText() {
			this.mode = this.mode !== 'audio' ? 'audio' : 'text';
		},
		// 录音相关
		voiceTouchStart(e) {
			//初始化
			this.isRecording = true;
			this.RecordingStartY =
				e.changedTouches[0].screenY || e.changedTouches[0].pageY;
			this.unRecord = false;
			// 开始录音
			this.RECORD.start({
				format: 'mp3'
			});
		},
		// 录音结束
		voiceTouchEnd() {
			this.isRecording = false;
			// 停止录音
			this.RECORD.stop();
		},
		// 录音被打断 取消发送
		voiceTouchCancel() {
			this.isRecording = false;
			this.unRecord = true;
			// 停止录音
			this.RECORD.stop();
		},
		voiceTouchMove(e) {
			let RecordingEndY =
				e.changedTouches[0].screenY || e.changedTouches[0].pageY;
			let Y = Math.abs(RecordingEndY - this.RecordingStartY);
			this.unRecord = Y >= 60;
		},
		// 打开聊天信息设置
		openChatSet(){
			uni.navigateTo({
				url:'../chat-set/chat-set'
			})
		}
	}
};
</script>

<style scoped>
@import '@/common/free.css';
@import '@/common/common.css';
/* #ifndef APP-PLUS-NVUE */
@import '@/common/free-icon.css';
/* #endif*/

</style>
